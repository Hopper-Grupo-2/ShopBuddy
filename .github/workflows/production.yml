name: Deploy application to production
run-name: Run Deploy application to production

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install dependencies
              run: npm install --frozen-lockfile

            - name: Install client dependencies
              working-directory: ./client
              run: yarn install

            - name: Build typescript project
              run: npm run build --if-present

    test:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install dependencies
              run: npm install

            - name: Testing app with Jest
              run: npm run test && echo '✅ ✅ Tests passed!'

    deploy-production:
        runs-on: [self-hosted, shopbuddy-production]
        needs: [build, test]
        if: ${{ github.ref == 'refs/heads/main' }}

        strategy:
            matrix:
                node-version: [16.x]

        steps:
            - run: echo "O usuário atual é $(whoami)"
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v3
            # Runs a single command using the runners shell
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - run: npm install

            - name: Install client dependencies
              working-directory: ./client
              run: yarn install

            - name: Create .env file
              run: |
                  echo "PORT=${{ vars.MY_PORT_PRODUCTION }}" >> .env
                  echo "MONGO_INITDB_ROOT_USERNAME=${{ vars.MONGO_INITDB_ROOT_USERNAME }}" >> .env
                  echo "MONGO_INITDB_ROOT_PASSWORD=${{ vars.MONGO_INITDB_ROOT_PASSWORD }}" >> .env
                  echo "MONGO_USER=${{ vars.MONGO_USER }}" >> .env
                  echo "MONGO_PASSWORD=${{ vars.MONGO_PASSWORD }}" >> .env
                  echo "MONGO_DB=${{ vars.MONGO_DB }}" >> .env
                  echo "JWTSECRET=${{ vars.JWTSECRET }}" >> .env
                  echo "NODE_ENV=prod" >> .env
                  cat .env

            #- run: npm run build --if-present
            #- run: npm run test
            #- run: pm2 restart productionapp
            - run: docker-compose -f docker-compose.prod.yaml up -d
