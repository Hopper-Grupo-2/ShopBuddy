name: Workflow to build, test and staging deploy
run-name: Run Workflow build, test and staging deploy
on:
    push:
        branches-ignore:
            - main
    pull_request:
        types: [opened]

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install dependencies
              run: npm install --frozen-lockfile

            - name: Install client dependencies
              working-directory: ./client
              run: yarn install

            - name: Build typescript project
              run: npm run build --if-present

    test:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Create .env file
              run: |
                  echo "PORT=${{ vars.MY_PORT_STAGING }}" >> .env
                  echo "MONGO_INITDB_ROOT_USERNAME=${{ vars.MONGO_INITDB_ROOT_USERNAME }}" >> .env
                  echo "MONGO_INITDB_ROOT_PASSWORD=${{ vars.MONGO_INITDB_ROOT_PASSWORD }}" >> .env
                  echo "MONGO_USER=${{ vars.MONGO_USER }}" >> .env
                  echo "MONGO_PASSWORD=${{ vars.MONGO_PASSWORD }}" >> .env
                  echo "MONGO_DB=${{ vars.MONGO_DB }}" >> .env
                  echo "JWTSCRET=MYSECRET" >> .env
                  echo "NODE_ENV=staging" >> .env
                  cat .env
                  
            - name: Testing app with Jest
              run: |
                  docker compose -f docker-compose.test.yaml up -d
                  docker compose -f docker-compose.test.yaml logs -f app
           # Etapa para verificar o status do contêiner e armazenar o código de saída em uma variável
            - name: Check test status
              id: test-status
              run: |
                docker compose ps # Verifique o nome do contêiner com os testes
                TEST_EXIT_CODE=$(docker compose -f docker-compose.test.yaml ps -q appshop-test | xargs docker inspect -f '{{ .State.ExitCode }}')
                echo "Test exit code: $TEST_EXIT_CODE"
                if [ $TEST_EXIT_CODE -eq 1 ]; then
                  echo "Tests passed!"
                else
                  echo "Tests failed!"
                  exit 1
                fi
            - name: Tests passed
              run: echo '✅ ✅ Tests passed!'

    deploy-staging:
        runs-on: [self-hosted, shopbuddy-staging]
        needs: [build, test]
        if: ${{ github.ref == 'refs/heads/staging' }}

        strategy:
            matrix:
                node-version: [16.x]

        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v3
            # Runs a single command using the runners shell
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - run: npm install

            - name: Install client dependencies
              working-directory: ./client
              run: yarn install

            - name: Create .env file
              run: |
                  echo "PORT=${{ vars.MY_PORT_STAGING }}" >> .env
                  echo "MONGO_INITDB_ROOT_USERNAME=${{ vars.MONGO_INITDB_ROOT_USERNAME }}" >> .env
                  echo "MONGO_INITDB_ROOT_PASSWORD=${{ vars.MONGO_INITDB_ROOT_PASSWORD }}" >> .env
                  echo "MONGO_USER=${{ vars.MONGO_USER }}" >> .env
                  echo "MONGO_PASSWORD=${{ vars.MONGO_PASSWORD }}" >> .env
                  echo "MONGO_DB=${{ vars.MONGO_DB }}" >> .env
                  echo "JWTSECRET=${{ vars.JWTSECRET }}" >> .env
                  echo "NODE_ENV=staging" >> .env
                  cat .env

            - run: docker-compose down
            - run: docker rm -f appshop-staging
            - run: docker rmi shopbuddystaging-app
            - run: docker-compose -f docker-compose.staging.yaml up -d
            - run: yes | docker system prune -a
            - run: rm -rf ~/.cache/*
